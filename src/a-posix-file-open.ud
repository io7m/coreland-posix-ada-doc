(section
  (ref "posix_file_open")
  (title "POSIX.File.Open")
  (para procedure_desc "Open file.")
  (subsection
    (title "Synopsis")
    (para-verbatim procedure_synopsis
"with POSIX.Errno;
with POSIX.Error;
with POSIX.File;
with POSIX.Permissions;

procedure Open
  (File_Name    : in String;
   Non_Blocking : in Boolean;
   Mode         : in Permissions.Mode_t;
   Flags        : in Open_Flags_t;
   Descriptor   : out Descriptor_t;
   Error_Value  : out Error.Error_t);
--# global in Errno.Errno_Value;
--# derives Descriptor from File_Name, Non_Blocking, Mode, Flags &
--#         Error_Value from File_Name, Non_Blocking, Mode, Flags, Errno.Errno_Value;
--# post ((Descriptor >= 0) and (Error_Value = Error.Error_None)) or
--#      ((Descriptor = -1) and (Error_Value /= Error.Error_None));
"))
  (subsection
    (title "Description")
    (para
      "The " (item ada_procedure "Open") " procedure opens
      the file " (item parameter "File_Name") ", returning
      a file descriptor in " (item parameter "Descriptor") ".")
    (para
      "The behaviour of the procedure is controlled via the "
      (item parameter "Flags") " parameter. For the precise
      semantics of these flags, check the POSIX specification "
        (footnote (link-ext "http://www.opengroup.org/onlinepubs/9699919799/functions/open.html")) ".")
    (para
      "The set of valid combinations of flags is implementation-defined.")
    (para
      "If " (item parameter "Non_Blocking") " is specified, the file
       is opened in non-blocking mode."))
  (subsection
    (title "Postconditions")
    (para
      "On success, the procedure returns a valid file descriptor in "
      (item parameter "Descriptor") " with " (item parameter "Error_Value")
      " set to " (item constant "Error_None") ".")
    (para
      "On failure, the procedure returns an invalid file descriptor in "
      (item parameter "Descriptor") " with " (item parameter "Error_Value")
      " set to a value not equal to " (item constant "Error_None") ".")))
