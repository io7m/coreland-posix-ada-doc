(section
  (ref "posix_user_db_get_entry_by_user_id")
  (title "POSIX.User_DB.Get_Entry_By_User_ID")
  (para procedure_desc "Retrieve entry from user database by name.")
  (subsection
    (title "Synopsis")
    (para-verbatim procedure_synopsis
"with POSIX.Errno;
with POSIX.Error;

procedure Get_Entry_By_User_ID
    (User_ID        : in     User_ID_t;
     Database_Entry :    out Database_Entry_t;
     Found_Entry    :    out Boolean;
     Error_Value    :    out Error.Error_t);
--# global in Errno.Errno_Value;
--# derives Database_Entry, Found_Entry from User_ID &
--#         Error_Value                 from User_ID, Errno.Errno_Value;
--# post ((Error_Value = Error.Error_None)  and (Is_Valid (Database_Entry))) or
--#      ((Error_Value /= Error.Error_None) and (not Is_Valid (Database_Entry)));
"))
  (subsection
    (title "Description")
    (para
      "The " (item ada_procedure "Get_Entry_By_User_ID") " procedure retrieves
      the database entry for the user " (item parameter "User_ID") "."))
  (subsection
    (title "Postconditions")
    (para
      "The procedure returns the " (link "posix_user_db_is_valid" "valid")
      " database entry in " (item parameter "Database_Entry") " with "
      (item parameter "Found_Entry") " set to " (item constant "True") " if
      the given user was found in the database.")
    (para
      "The procedure returns an " (link "posix_user_db_is_valid" "valid")
      " database entry in " (item parameter "Database_Entry") " with "
      (item parameter "Found_Entry") " set to " (item constant "False") " if
      the given user was not found in the database.")
    (para
      "The procedure sets " (item parameter "Error_Value") " to a value other
      than " (item constant "Error.Error_None") " if an error occured whilst
      retrieving a database entry.")))
